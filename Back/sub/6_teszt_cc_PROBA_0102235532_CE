#include <stdio.h>
#include <stdlib.h>


int foelem(double ** A, int k, int n);
void sorcsere_A(double **A, int maxsor, int k, int n);
void sorcsere_p(int *p, int maxsor, int k);
double* sorcsere_b(double *b, int *p, int n);
double absz(double szam);

int main(int argc, char** argv) {

    int n, k, maxsor, nulla, db;
    double **A;
    double *b;
    int *p;
    int i, j, z, szing;
    double tmp;
    char s[1000];

    for (;;) {
        scanf("%d", &n);
        if (!n)
            break;

        A = calloc(n, sizeof (double));
        for (i = 0; i < n; ++i)
            A[i] = calloc(n, sizeof (double));
        p = calloc(n, sizeof (int));
        b = calloc(n, sizeof (double));
        szing = 0;

        for (i = 0; i < n; ++i)
            for (j = 0; j < n; ++j)
                scanf("%lf", &A[i][j]);

        for (i = 0; i < n; ++i) {
            p[i] = i;
        }

        /* LU felbontas */
        for (k = 0; k < n - 1; ++k) {
            /* foelem kivalasztas, sorcsere */
            maxsor = foelem(A, k, n);
            if (absz(A[maxsor][k]) < 1e-15) {
                szing = 1;
                printf("szingularis\n");
                break;
            }
            sorcsere_A(A, maxsor, k, n);
            sorcsere_p(p, maxsor, k);

            nulla = 0;

            /* L */
            for (i = k + 1; i < n; ++i) {
/*
                if (absz(A[i][k]) < 1e-15)
                {
                    szing = 1;
                    printf("szingularis\n");
                    break;

                    ++nulla;

                }
*/
                A[i][k] /= A[k][k];

            }



            /* U */

            for (i = k + 1; i < n; ++i) {
                for (j = k + 1; j < n; ++j) {
                    A[i][j] -= A[i][k] * A[k][j];
                }
            }
            
            if (absz(A[i - 1][j - 1]) < 1e-15) {
                szing = 1;
                printf("szingularis\n");
                break;
            }


        }
        /* LER megoldasa */

        scanf("%d", &db);
        for (i = 0; i < db; ++i) {
            for (j = 0; j < n; ++j)
                scanf("%lf", &b[j]);

            b = sorcsere_b(b, p, n);

            /*Ly=b*/
            for (j = 0; j < n; ++j) {
                for (tmp = z = 0; z < j; ++z) {
                    tmp += A[j][z] * b[z];
                }
                b[j] -= tmp;
            }

            /*Ux=y*/
            for (j = n - 1; j >= 0; --j) {
                for (tmp = 0, z = j + 1; z < n; ++z) {
                    tmp += A[j][z] * b[z];
                }
                b[j] = (b[j] - tmp) * (1.0 / A[j][j]);
            }
            if (!szing) {
                for (j = 0; j < n; ++j)
                    printf("%.8lf ", b[j]);
                printf("\n");
            }
        }

        gets(s);

    }

    return (EXIT_SUCCESS);
}

int foelem(double ** A, int k, int n) {
    int i, maxhely;
    double max;
    max = absz(A[k][k]);
    maxhely = k;
    for (i = k + 1; i < n; ++i) {
        if (absz(A[i][k]) - max > 1e-15) {
            maxhely = i;
        }
    }
    return maxhely;

}

void sorcsere_A(double **A, int maxsor, int k, int n) {
    int i;
    double tmp;
    for (i = 0; i < n; ++i) {
        tmp = A[k][i];
        A[k][i] = A[maxsor][i];
        A[maxsor][i] = tmp;
    }
}

void sorcsere_p(int *p, int maxsor, int k) {
    int tmp;
    tmp = p[k];
    p[k] = p[maxsor];
    p[maxsor] = tmp;
}

double absz(double szam) {
    return szam > 0 ? szam : (-1 * szam);
}

double* sorcsere_b(double *b, int *p, int n) {
    int i;
    double *uj;
    uj = calloc(n, sizeof (double));
    for (i = 0; i < n; ++i) {
        uj[i] = b[p[i]];
    }
    return uj;
}
